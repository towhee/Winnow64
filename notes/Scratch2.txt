FrameDecoder::FrameDecoder(QObject *parent)
{
    status = Status::Idle;
    mediaPlayer = new QMediaPlayer();
    videoSink = new QVideoSink;
    mediaPlayer->setVideoOutput(videoSink);
    connect(videoSink, &QVideoSink::videoFrameChanged, this, &FrameDecoder::frameChanged);
}

void FrameDecoder::addToQueue(QString path, QModelIndex dmIdx, int dmInstance)
{
    Item item;
    item.fPath = path;
    item.dmIdx = dmIdx;
    item.dmInstance = dmInstance;
    queue.append(item);
    if (status == Status::Idle) getNextThumbNail();
}

void FrameDecoder::getNextThumbNail(QString src)
{
    if (queue.isEmpty()) {
        status = Status::Idle;
        return;
    }
    status = Status::Busy;
    mediaPlayer->setSource(queue.at(0).fPath);
    mediaPlayer->play();
}

void FrameDecoder::frameChanged(const QVideoFrame frame)
{
    if (G::isLogger) G::log("FrameDecoder::frameChanged");
    // ignore frameChanged signals before next mediaPlayer source is set
    if (mediaPlayer->playbackState() == QMediaPlayer::PlaybackState::StoppedState) return;

    QImage im = frame.toImage();
    QPixmap pm = QPixmap::fromImage(im.scaled(G::maxIconSize, G::maxIconSize, Qt::KeepAspectRatio));
    qint64 duration = mediaPlayer->duration();
    emit setFrameIcon(queue.at(0).dmIdx, pm, queue.at(0).dmInstance, duration, thisFrameDecoder);
    mediaPlayer->stop();
    if (!queue.isEmpty()) queue.remove(0);

    // exhaust QVideoSink frameChanged signals after mediaPlayer is stopped
    qApp->processEvents(QEventLoop::AllEvents); // would prefer not to use this as it is risky

    getNextThumbNail("frameChanged");
}
