lipo -create /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-x86_64/lib/libturbojpeg.dylib /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-arm64/lib/libturbojpeg.dylib -output /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal/libturbojpeg.dylib
lipo -create /Users/roryhill/Projects/Winnow64/Lib/libtiff/build-x86_64/lib/libtiff.dylib /Users/roryhill/Projects/Winnow64/Lib/libtiff/build-arm64/lib/libtiff.dylib -output /Users/roryhill/Projects/Winnow64/Lib/libtiff/build-universal/libtiff.dylib

export PATH="/Users/roryhill/Qt/Tools/CMake/CMake.app/Contents/bin/cmake:$PATH"
/Users/roryhill/Qt/Tools/CMake/CMake.app/Contents/bin/cmake .. -DCMAKE_INSTALL_PREFIX=/Users/roryhill/Projects/Winnow64/Lib/libtiff/build-arm64

/Users/roryhill/Qt/Tools/CMake/CMake.app/Contents/bin/cmake .. \
    -G"Unix Makefiles" \
    -DCMAKE_INSTALL_PREFIX=/Users/roryhill/Projects/Winnow64/Lib/libtiff/build-x86_64 \
    -DJPEG_LIBRARY=/Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-x86_64/lib/libturbojpeg.dylib \
    -DJPEG_INCLUDE_DIR=/Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-x86_64/include

/Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal/libturbojpeg.0.dylib
/Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal/libturbojpeg.0.dylib

/Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal/libturbojpeg.0.dylib (no such file)
/Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal/libturbojpeg.0.dylib

roryhill@Quark build-universal % otool -L /Users/roryhill/Projects/build-winnow64-Qt_6_5_3_for_macOS-Release/Winnow.app/Contents/MacOS/Winnow
/Users/roryhill/Projects/build-winnow64-Qt_6_5_3_for_macOS-Release/Winnow.app/Contents/MacOS/Winnow (architecture x86_64):
        /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices (compatibility version 1.0.0, current version 65.0.0)
        /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 3038.1.255)
        /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 3038.1.255)
        /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.12)
        @rpath/libtiff.6.dylib (compatibility version 6.0.0, current version 6.1.0)
        @rpath/libturbojpeg.0.dylib (compatibility version 0.0.0, current version 0.3.0)
        @rpath/QtMultimediaWidgets.framework/Versions/A/QtMultimediaWidgets (compatibility version 6.0.0, current version 6.5.3)
        @rpath/QtWidgets.framework/Versions/A/QtWidgets (compatibility version 6.0.0, current version 6.5.3)
        @rpath/QtMultimedia.framework/Versions/A/QtMultimedia (compatibility version 6.0.0, current version 6.5.3)
        @rpath/QtGui.framework/Versions/A/QtGui (compatibility version 6.0.0, current version 6.5.3)
        /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit (compatibility version 45.0.0, current version 2566.0.0)
        /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO (compatibility version 1.0.0, current version 1.0.0)
        /System/Library/Frameworks/Metal.framework/Versions/A/Metal (compatibility version 1.0.0, current version 366.22.0)
        @rpath/QtNetwork.framework/Versions/A/QtNetwork (compatibility version 6.0.0, current version 6.5.3)
        @rpath/QtConcurrent.framework/Versions/A/QtConcurrent (compatibility version 6.0.0, current version 6.5.3)
        @rpath/QtCore.framework/Versions/A/QtCore (compatibility version 6.0.0, current version 6.5.3)
        /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit (compatibility version 1.0.0, current version 275.0.0)
        /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration (compatibility version 1.0.0, current version 1.0.0)
        /System/Library/Frameworks/AGL.framework/Versions/A/AGL (compatibility version 1.0.0, current version 1.0.0)
        /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL (compatibility version 1.0.0, current version 1.0.0)
        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1800.101.0)
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1351.0.0)
        /System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync (compatibility version 1.0.0, current version 3764.0.0)
        /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics (compatibility version 64.0.0, current version 1883.0.0)
        /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)
/Users/roryhill/Projects/build-winnow64-Qt_6_5_3_for_macOS-Release/Winnow.app/Contents/MacOS/Winnow (architecture arm64):
        /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices (compatibility version 1.0.0, current version 65.0.0)
        /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 3038.1.255)
        /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 3038.1.255)
        /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.12)
        @rpath/libtiff.6.dylib (compatibility version 6.0.0, current version 6.1.0)
        @rpath/libturbojpeg.0.dylib (compatibility version 0.0.0, current version 0.3.0)
        @rpath/QtMultimediaWidgets.framework/Versions/A/QtMultimediaWidgets (compatibility version 6.0.0, current version 6.5.3)
        @rpath/QtWidgets.framework/Versions/A/QtWidgets (compatibility version 6.0.0, current version 6.5.3)
        @rpath/QtMultimedia.framework/Versions/A/QtMultimedia (compatibility version 6.0.0, current version 6.5.3)
        @rpath/QtGui.framework/Versions/A/QtGui (compatibility version 6.0.0, current version 6.5.3)
        /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit (compatibility version 45.0.0, current version 2566.0.0)
        /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO (compatibility version 1.0.0, current version 1.0.0)
        /System/Library/Frameworks/Metal.framework/Versions/A/Metal (compatibility version 1.0.0, current version 366.22.0)
        @rpath/QtNetwork.framework/Versions/A/QtNetwork (compatibility version 6.0.0, current version 6.5.3)
        @rpath/QtConcurrent.framework/Versions/A/QtConcurrent (compatibility version 6.0.0, current version 6.5.3)
        @rpath/QtCore.framework/Versions/A/QtCore (compatibility version 6.0.0, current version 6.5.3)
        /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit (compatibility version 1.0.0, current version 275.0.0)
        /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration (compatibility version 1.0.0, current version 1.0.0)
        /System/Library/Frameworks/AGL.framework/Versions/A/AGL (compatibility version 1.0.0, current version 1.0.0)
        /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL (compatibility version 1.0.0, current version 1.0.0)
        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1800.101.0)
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1351.0.0)
        /System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync (compatibility version 1.0.0, current version 3764.0.0)
        /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics (compatibility version 64.0.0, current version 1883.0.0)
        /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)


I have confirmed:
1. the symlink correctly points to the target file
2. my .pro file already has macx:QMAKE_RPATHDIR += /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal
3. otool -l your_executable | grep -A 5 LC_RPATH ncludes the path /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal
4. otool -L your_executable shows @rpath/libturbojpeg.0.dylib (compatibility version ... , current version ...)
5. install_name_tool -add_rpath /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal your_executable reports file already has RPATH for /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal

Steps to build /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal/libturbojpeg.dylib

mkdir /Users/roryhill/Projects/Winnow64/Lib/libtiff/build-arm64
mkdir /Users/roryhill/Projects/Winnow64/Lib/libtiff/build-x86_64
mkdir /Users/roryhill/Projects/Winnow64/Lib/libtiff/build-universal
cd /Users/roryhill/Projects/Winnow64/Lib/libtiff/build-arm64
cmake .. -G"Unix Makefiles" -DCMAKE_OSX_ARCHITECTURES="arm64" -DCMAKE_INSTALL_PREFIX=/Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-arm64
make -j$(sysctl -n hw.ncpu)
make install
cd /Users/roryhill/Projects/Winnow64/Lib/libtiff/build-x86_64
cmake .. -G"Unix Makefiles" -DCMAKE_OSX_ARCHITECTURES="x86_64" -DCMAKE_INSTALL_PREFIX=/Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-x86_64
make -j$(sysctl -n hw.ncpu)
make install
lipo -create /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-x86_64/libturbojpeg.dylib /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-arm64/libturbojpeg.dylib -output /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal/libturbojpeg.dylib
lipo -create /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-x86_64/libturbojpeg.0.3.0.dylib /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-arm64/libturbojpeg.0.3.0.dylib -output /Users/roryhill/Projects/Winnow64/Lib/libjpeg-turbo/build-universal/libturbojpeg.0.3.0.dylib

Decode TIFF parameter values:
1st StripOffset          8
1st StripByteCount       185852200
BitsPerSample            16
PhotometricInterpation   2
SamplesPerPixel          3
RowsPerStrip             4000
Compression              5
PlanarConfiguration      1
Predictor                0
QTimer::singleShot()
FSTree::FSTree(QWidget *parent, Metadata *metadata)
        : QTreeView(parent), delegate(new HoverDelegate(this))
{
    setSelectionMode(QAbstractItemView::ExtendedSelection);
    setSelectionBehavior(QAbstractItemView::SelectRows);
}

void FSTree::mousePressEvent(QMouseEvent *event)
{
    QModelIndex idx = indexAt(event->pos());
    if (!idx.isValid()) return;

    // update path
    QModelIndex idx0 = idx.sibling(idx.row(), 0);
    QString path = idx0.data(QFileSystemModel::FileNameRole).toString();

    // load all subfolders images
    if (event->modifiers() & Qt::AltModifier) {
        selectionModel()->clearSelection();
        expandRecursively(idx0);
        selectRecursively(idx0);
        return;
    }

    QTreeView::mousePressEvent(event);
}

void FSTree::mouseReleaseEvent(QMouseEvent *event)
{
    if (event->modifiers() == Qt::NoModifier || event->modifiers() == Qt::ControlModifier) {
        QTreeView::mouseReleaseEvent(event);
    }
}

void FSTree::selectItemAndChildren(const QModelIndex &index)
{
    QItemSelectionModel *selectionModel = this->selectionModel();
    if (!selectionModel) {
        return;
    }

    // Use a queue to traverse all children of the given index
    QList<QModelIndex> queue;
    queue.append(index);

    while (!queue.isEmpty()) {
        QModelIndex currentIndex = queue.takeFirst();
        selectionModel->select(currentIndex, QItemSelectionModel::Select);

        // Add all children of the current item to the queue
        for (int i = 0; i < model()->rowCount(currentIndex); ++i) {
            queue.append(model()->index(i, 0, currentIndex));
        }
    }
}

-----------------------------

void DataModel::enqueueFolderSelection(const QString &folderPath, bool isAdding)
{

    QMutexLocker locker(&queueMutex);
    folderQueue.enqueue(qMakePair(folderPath, isAdding));

    // /*
    if (isDebug)
    {
    qDebug() << "DataModel::enqueueFolderSelection"
             << "isAdding =" << isAdding
             << "folder =" << folderPath
             << "folderQueue =" << folderQueue
        ;
    } //*/

    // If not already processing, start the processing
    if (!isProcessing) {
        isProcessing = true;
        processNextFolder();
    }
}

void DataModel::processNextFolder() {

    qDebug() << "DataModel::processNextFolder";

    // QMutexLocker locker(&queueMutex);
    if (folderQueue.isEmpty()) {
        qDebug() << "DataModel::processNextFolder Queue is empty";
        isProcessing = false;
        return;
    }

    QPair<QString, bool> folderOperation = folderQueue.dequeue();
    // locker.unlock(); // Unlock the queue while processing

    // if (isDebug)
    {
    qDebug() << "DataModel::processNextFolder"
             << "folderOperation.first =" << folderOperation.first
             << "folderOperation.second =" << folderOperation.second
                ;
    }//*/

    // Process the folder asynchronously using QtConcurrent
    QtConcurrent::run([this, folderOperation]() {
        if (folderOperation.second) {
            addFolder(folderOperation.first);
        } else {
            removeFolder(folderOperation.first);
        }

        // Continue with the next folder operation
        QMetaObject::invokeMethod(this, "processNextFolder", Qt::QueuedConnection);
    });
}

void DataModel::addFolder(const QString &folderPath)
{

    qDebug() << "DataModel::addFolder"
             << "folder =" << folderPath
                ;

    // control
    abortLoadingModel = false;
    currentFolderPath = folderPath;
    loadingModel = true;

    // folder fileInfo list
    QDir dir(folderPath);
    dir.setNameFilters(*fileFilters);
    dir.setFilter(QDir::Files);
    QList<QFileInfo> folderFileInfoList = dir.entryInfoList();
    std::sort(folderFileInfoList.begin(), folderFileInfoList.end(), lessThan);

    // datamodel size
    int row = rowCount();
    setRowCount(rowCount() + folderFileInfoList.count());

    for (const QFileInfo &fileInfo : folderFileInfoList) {
        fileInfoList.append(fileInfo);
        /*
        qDebug() << "DataModel::addFolder"
                 << "row =" << row
                 << "file =" << fileInfo.fileName()
                 << "folder =" << folderPath
                    ; //*/
        // Ensure thread-safe updates to the model
        QMetaObject::invokeMethod(this, [this, row, fileInfo]() {
            addFileDataForRow(row, fileInfo);
        }, Qt::QueuedConnection);
        row++;
    }
}

void DataModel::removeFolder(const QString &folderPath)
{
    QMetaObject::invokeMethod(this, [this, folderPath]() {
        for (int row = rowCount() - 1; row >= 0; --row) {
            QString filePath = index(row, 0).data(Qt::UserRole).toString();
            if (filePath.startsWith(folderPath)) {
                removeRow(row);
            }
        }
    }, Qt::QueuedConnection);
}

