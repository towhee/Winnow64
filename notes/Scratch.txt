The FrameDecoder class is run from a non GUI thread for each video image in a folder.
When there are 30 videos, the number of threads for the application, as shown in
Activity Monitor, jumps from 30 to 700.  Also, sometimes the memory pressure increases until
a force quit is required.

It appears that QMediaPlayer and QVideoSink are not releasing memory and threads.  What
do you think?

framedecoder.h
#ifndef FRAMEDECODER_H
#define FRAMEDECODER_H

#include <QtWidgets>
#include <QObject>
#include <QMutex>
#include <QMediaPlayer>
#include <QVideoSink>
#include <QVideoFrame>

class FrameDecoder : public QObject
{
    Q_OBJECT

public:
    FrameDecoder();
    QThread *frameDecoderThread;

signals:
    void setFrameIcon(QModelIndex dmIdx, QPixmap pm, int instance, qint64 duration,
                      QThread *frameDecoderThread);
    void frameImage(QString path, QImage image, QString source);

public slots:
    void stop();
    void clear();
    void addToQueue(QString fPath, int longSide, QString source = "",
                    QModelIndex dmIdx = QModelIndex(), int dmInstance = 0);
    void frameChanged(const QVideoFrame frame);
    void errorOccurred(QMediaPlayer::Error, const QString &errorString);

private:
    void getNextThumbNail(QString src = "");
    enum Status {Idle, Busy} status;
    struct Item {
        QString fPath;
        int longSide;
        QModelIndex dmIdx;
        int dmInstance;
        QString source;
    };
    QList<Item> queue;
    FrameDecoder *thisFrameDecoder;
    QMediaPlayer *mediaPlayer;
    QVideoSink *videoSink;
    QString prevPath = "";
    bool frameAlreadyDone;

    bool abort = false;
    bool isDebugging;
};
#endif // FRAMEDECODER_H

framedecoder.cpp
#include "framedecoder.h"
#include "Main/global.h"

/*
    Generates a thumbnail from the first video frame in a video file.

    This is accomplished by creating a QMediaPlayer that decodes and plays the video file
    to the virtual canvas QVideoSink. Each time the video frame changes QVideoSink emits
    a videoFrameChanged signal. FrameDecoder::frameChanged receives the signal, converts
    the frame into a QImage, emits setFrameIcon and stops the QMediaPlayer. The
    setFrameIcon signal is received by DataModel::setIconFromFrame, where the icon is
    added to the datamodel.

    This convoluted process is required because QVideoSink does not know which file the
    video frame came from. When processing many files, it is not guaranteed that the
    signal/slots will be sequential. FrameDecoder maintains a queue of videos to process.

    After mediaPlayer->stop() there may be a number of QVideoSink frameChanged signals in
    the event queue. It is necessary to execute a qApp->processEvents to clear these
    excess signals.

    Summary of sequence:
        - thumb->loadFromVideo signals to frameDecoder->addToQueue
        - frameDecoder->addToQueue calls frameDecoder->getNextThumbNail
        - start processing loop
            - frameDecoder->getNextThumbNail sets media source to first in queue
              and starts mediaPlayer
            - mediaPlayer signals frameDecoder->frameChanged
            - frameDecoder->frameChanged converts video frame to QPixmap
            - frameDecoder->frameChanged signals dm->setIconFromVideoFrame
            - frameDecoder->frameChanged stops mediaPlayer
            - frameDecoder->frameChanged calls frameDecoder->getNextThumbNail
       - loop until queue is empty
*/

FrameDecoder::FrameDecoder()  : QObject(nullptr)
{
    if (G::isLogger) G::log("FrameDecoder::FrameDecoder");
    status = Status::Idle;
    mediaPlayer = new QMediaPlayer();
    videoSink = new QVideoSink;
    mediaPlayer->setVideoOutput(videoSink);
    connect(videoSink, &QVideoSink::videoFrameChanged, this, &FrameDecoder::frameChanged);
    connect(mediaPlayer, &QMediaPlayer::errorOccurred, this, &FrameDecoder::errorOccurred);
    abort = false;
    isDebugging = false;
}

void FrameDecoder::stop()
{
    if (G::isLogger) G::log("FrameDecoder::stop");
    abort = true;
}

void FrameDecoder::clear()
{
    queue.clear();
    prevPath = "";
    frameAlreadyDone = false;
    return;
}

void FrameDecoder::addToQueue(QString path, int longSide, QString source,
                              QModelIndex dmIdx, int dmInstance)
{
    if (abort) return;
    Item item;
    item.fPath = path;
    item.longSide = longSide;
    item.source = source;
    item.dmIdx = dmIdx;
    item.dmInstance = dmInstance;
    queue.append(item);
    if (status == Status::Idle) getNextThumbNail("addToQueue");
}

void FrameDecoder::getNextThumbNail(QString src)
{
    if (G::isLogger) G::log("FrameDecoder::getFrame");
    if (abort) {
        abort = false;
    }

    if (queue.isEmpty()) {
        status = Status::Idle;
        return;
    }

    status = Status::Busy;
    if (!abort) mediaPlayer->setSource(queue.at(0).fPath);
    if (!abort) mediaPlayer->play();
}

void FrameDecoder::frameChanged(const QVideoFrame frame)
{
    if (G::isLogger) G::log("FrameDecoder::frameChanged");

    if (abort) return;

    bool validFrame = false;

    static int attempts = 0;

    if (mediaPlayer->playbackState() == QMediaPlayer::PlaybackState::StoppedState) return;

    QImage im = frame.toImage();

    // wait for first valid frame
    if (im.isNull() || !frame.isValid() || queue.empty()) {
        validFrame = false;
    }
    else {
        validFrame = true;
    }

    attempts++;

    if (!validFrame) return;

    QString path = queue.at(0).fPath;
    int ls = queue.at(0).longSide;
    if (queue.at(0).source == "dmThumb") {
        // set the icon in datamodel
        if (queue.at(0).dmIdx.isValid()) {
            QPixmap pm = QPixmap::fromImage(im.scaled(ls, ls, Qt::KeepAspectRatio));
            qint64 duration = mediaPlayer->duration();

            emit setFrameIcon(queue.at(0).dmIdx, pm, queue.at(0).dmInstance,
                              duration, frameDecoderThread);
        }
    }
    else {
        // autonomous source
        QString source = queue.at(0).source;
        // qDebug() << "FrameDecoder::frameChanged  ls =" << ls;
        if (ls > 0)
            emit frameImage(queue.at(0).fPath, im.scaled(ls, ls, Qt::KeepAspectRatio), source);
        else
            emit frameImage(queue.at(0).fPath, im, source);
    }

    if (validFrame || attempts > 10) {
        mediaPlayer->stop();
        attempts = 0;
        prevPath = path;
        frameAlreadyDone = true;
        if (!queue.isEmpty()) queue.remove(0);
        if (!abort) getNextThumbNail("frameChanged");
    }
}

void FrameDecoder::errorOccurred(QMediaPlayer::Error, const QString &msg)
{
    G::issue("Error", msg, "FrameDecoder::errorOccurred", queue.at(0).dmIdx.row(), queue.at(0).fPath);
}



I have modified FrameDecoder as suggested:

FrameDecoder:: ~FrameDecoder()
{
    if (mediaPlayer) {
        mediaPlayer->stop();
        mediaPlayer->setVideoOutput(nullptr);  // disconnect sink
        delete mediaPlayer;
        mediaPlayer = nullptr;
    }
    if (videoSink) {
        delete videoSink;
        videoSink = nullptr;
    }
}

void FrameDecoder::stop()
{
    if (G::isLogger) G::log("FrameDecoder::stop");
    // qDebug() << "FrameDecoder::stop  isGuiThread =" << G::isGuiThread();
    if (mediaPlayer) {
        mediaPlayer->stop();
        mediaPlayer->setVideoOutput(nullptr);  // disconnect sink
        delete mediaPlayer;
        mediaPlayer = nullptr;
    }
    if (videoSink) {
        delete videoSink;
        videoSink = nullptr;
    }
    abort = true;
}

and changed setFrameIcon to include a reference to itself:

emit setFrameIcon(queue.at(0).dmIdx, pm, queue.at(0).dmInstance, duration, thisFrameDecoder);

setFrameIcon is connected to DataModel::setIconFromVideoFrame, where video info is added
and the FrameDecoder is deleted.

void DataModel::setIconFromVideoFrame(QModelIndex dmIdx, QPixmap pm, int fromInstance,
                                      qint64 duration, FrameDecoder *frameDecoder)
{
     int row = dmIdx.row();

     QMutexLocker locker(&mutex);
     QString modelDuration = index(dmIdx.row(), G::DurationColumn).data().toString();
     if (modelDuration == "") {
         duration /= 1000;
         QTime durationTime((duration / 3600) % 60, (duration / 60) % 60,
             duration % 60, (duration * 1000) % 1000);
         QString format = "mm:ss";
         if (duration > 3600) format = "hh:mm:ss";
         setData(index(row, G::DurationColumn), durationTime.toString(format));
     }

     QStandardItem *item = itemFromIndex(dmIdx);
     if (itemFromIndex(dmIdx)->icon().isNull()) {
         if (item != nullptr) {
             item->setIcon(pm);
             // set aspect ratio for video
             if (pm.height() > 0) {
                 QString aspectRatio = QString::number(pm.width() * 1.0 / pm.height(), 'f', 2);
                 setData(index(row, G::AspectRatioColumn), aspectRatio);
             }
         }
     }

     delete frameDecoder;
}

Suggestions?




