fstree.h

#ifndef FSTREE_H
#define FSTREE_H

class FSFilter : public QSortFilterProxyModel
{
    Q_OBJECT

public:
    FSFilter(QObject *parent);
    void refresh();

protected:
    bool filterAcceptsRow(int source_row,
                          const QModelIndex &source_parent) const; // override;
};

class FSModel : public QFileSystemModel
{
    Q_OBJECT
public:
    FSModel(QWidget *parent, Metadata &metadata, bool &combineRawJpg);
        bool hasChildren(const QModelIndex &parent) const;
    int columnCount(const QModelIndex &parent = QModelIndex()) const;
    QVariant headerData(int section, Qt::Orientation orientation, int role) const;
    QVariant data(const QModelIndex &index, int role) const;
    void refresh();
    void refresh(const QString &dPath);
    bool showImageCount;
    bool &combineRawJpg;
    bool forceRefresh = true;
    Metadata &metadata;
    int imageCountColumn = 4;

signals:
    void update() const;        // const req'd but shows warning

private:
    QDir *dir;
    void insertCount(QString dPath, QString value);
    void insertCombineCount(QString dPath, QString value);
    mutable QHash <QString, QString> count;
    mutable QHash <QString, QString> combineCount;
    mutable QModelIndex testIdx;
};

class FSTree : public QTreeView
{
        Q_OBJECT

public:
    FSTree(QWidget *parent, DataModel *dm, Metadata *metadata);
    void createModel();
    void setShowImageCount(bool showImageCount);
    int imageCount(QString path);
    bool isShowImageCount();
    qlonglong selectionCount();

    FSModel *fsModel;
    FSFilter *fsFilter;

private:
    QFileSystemModel fileSystemModel;
    Metadata *metadata;
    DataModel *dm;
    QDir *dir;
    QStringList *fileFilters;
};
#endif





