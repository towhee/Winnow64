#include <tchar.h>


bool UsbController::ejectDrive(char driveletter, QString &errmsg)
{
    char devicepath[7];
    char format[] = "\\\\.\\?:";
    strcpy_s(devicepath, format);
    devicepath[4] = driveletter;
    errmsg = "";

    DWORD dwRet = 0;
    wchar_t wtext[7];
    size_t textlen = 7;
    mbstowcs_s(&textlen, wtext, devicepath,strlen(devicepath)+1);
    HANDLE hVol = CreateFile(wtext, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_WRITE | FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
    if (hVol == INVALID_HANDLE_VALUE)
    {
        FormatErrorMsg("CreateFile: ", errmsg);
        return false;
    }

    if(!DeviceIoControl(hVol, FSCTL_LOCK_VOLUME, 0, 0, 0, 0, &dwRet, 0))
    {
        FormatErrorMsg("Lock Volume: ", errmsg);
        return false;
    }

    if(!DeviceIoControl(hVol, FSCTL_DISMOUNT_VOLUME, 0, 0, 0, 0, &dwRet, 0))
    {
        FormatErrorMsg("Dismount Volume: ", errmsg);
        return false;
    }

    if (!DeviceIoControl(hVol, IOCTL_STORAGE_EJECT_MEDIA, 0, 0, 0, 0, &dwRet, 0))
    {
        FormatErrorMsg("Eject Media: ", errmsg);
        return false;
    }

    CloseHandle(hVol);
    return true;
}

QMap<QString,QString> UsbController::getMountedRemovables()
{
    DWORD test = GetLogicalDrives();
    DWORD mask = 1;
    UINT type = 0;
    WCHAR wdrive[] = L"?:\\"; // use as a drive letter template

    QMap<QString,QString> removables;
    for (int i = 0; i < 32; i++)
    {
        if (test & mask)
        {
            wdrive[0] = (char)('A' + i); // change letter in template
            type = GetDriveType(wdrive);
            switch (type) {
            case DRIVE_REMOVABLE:
            {
                QString qdrive = QString((char)('A' + i)) + ":";
                if (!removables.contains(qdrive))
                {
                    QString name = mountNameFromDriveLetter((char)('A' + i));
                    removables.insert(qdrive, name);
                }
                break;
            }
            default: break;
            }
        }
        mask = mask << 1;
    }

    return removables;
}
