for (int i = 0; i < count; ++i) {
    imList->append(new CompareView(this, gridCell, dm, sel, metadata, icd, thumbView));
    imList->at(i)->loadImage(selection.at(i), fPath);
    // set toggleZoom value (from QSettings)
    imList->at(i)->toggleZoom = toggleZoom;

    // classification badge
    int row = idxPath.row();
    bool isPick = dm->sf->index(row, G::PickColumn).data(Qt::EditRole).toString() == "true";
    QString rating = dm->sf->index(row, G::RatingColumn).data(Qt::EditRole).toString();
    QString colorClass = dm->sf->index(row, G::LabelColumn).data(Qt::EditRole).toString();
    updateClassification(isPick, rating, colorClass, isRatingBadgeVisible, idxPath);

    // relay back and forward mouse btns toggle picks from a compareView
    connect(imList->at(i), SIGNAL(togglePick()), this, SLOT(togglePickSignalRelay()));

    // pass mouse click zoom to other images as a pct of width and height
    connect(imList->at(i), SIGNAL(zoomFromPct(QPointF, QModelIndex, bool)),
            this, SLOT(zoom(QPointF, QModelIndex, bool)));

    // sync panning
    connect(imList->at(i), SIGNAL(panFromPct(QPointF, QModelIndex)),
            this, SLOT(pan(QPointF, QModelIndex)));

    // start of pan position
    connect(imList->at(i), SIGNAL(panStartPct(QModelIndex)),
            this, SLOT(startPan(QModelIndex)));

    // cleanup at end of pan
    connect(imList->at(i), SIGNAL(cleanupAfterPan(QPointF,QModelIndex)),
            this, SLOT(cleanupAfterPan(QPointF,QModelIndex)));

    // get zoom factor to report status and send zoomChange to ZoomDlg
    connect(imList->at(i), SIGNAL(zoomChange(qreal,bool)),
            this, SLOT(zoomChangeFromView(qreal,bool)));

    // when select a compareView make sure all others hav been deselected
    connect(imList->at(i), SIGNAL(deselectAll()), this, SLOT(deselectAll()));

    // when select a compareView also load it in imageView
    connect(imList->at(i), &CompareView::load, imageView, &ImageView::loadImage);

    //        // align
    //        connect(imList->at(i), SIGNAL(align(QPointF, QModelIndex)),
    //                this, SLOT(align(QPointF, QModelIndex)));
}
