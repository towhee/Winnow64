reader.h
#ifndef READER_H
#define READER_H

#include <QtWidgets>

class Reader : public QObject
{
    Q_OBJECT
public:
    Reader(int id, DataModel *dm, ImageCache *imageCache);


    QThread *readerThread;  // use if currentThread() not working in stop()
    int threadId = -1;
    int instance = 0;
    bool isReadIcon = true;

signals:
    void done(int threadId);

public slots:
    void read(QModelIndex dmIdx, QString filePath, int instance, bool isReadIcon);
    void abortProcessing();
    void stop();

private:
    QMutex mutex;
    QWaitCondition condition;
    bool abort = false;
    bool readMetadata();
    void readIcon();
    DataModel *dm;
    ImageCache *imageCache;
    FrameDecoder *frameDecoder;
    Thumb *thumb;
};

#endif // READER_H

reader.cpp
#include "reader.h"
#include "Main/global.h"

Reader::Reader(int id, DataModel *dm, ImageCache *imageCache): QObject(nullptr)
{
    this->dm = dm;
    metadata = new Metadata;
    this->imageCache = imageCache;
    threadId = id;
    instance = 0;

    thumb = new Thumb(dm);
}

void Reader::stop()
{
    mutex.lock();
    abort = true;
    thumb->abortProcessing();
    readerThread->quit();
    readerThread->wait();
    abort = false;
    mutex.unlock();
}

void Reader::abortProcessing()
{
    mutex.lock();
    abort = true;
    thumb->abortProcessing();
    mutex.unlock();
}

void Reader::read(QModelIndex dmIdx, QString filePath, int instance, bool isReadIcon)
{
    abort = false;
    this->dmIdx = dmIdx;
    fPath = filePath;
    this->instance = instance;
    this->isReadIcon = isReadIcon;

    if (!abort) readMetadata();
    if (!abort) readIcon();

    if (!abort) emit done(threadId);
}
