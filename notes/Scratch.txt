Classes:
    ThumbReader     - calls instance of Thumb for each image in a folder
    Thumb           - calls appropriate decoder ie FrameDecoder
    FrameDecoder    - gets the first frame in a video file, signals DataModel
    DataModel       - sets icon and deletes FrameDecoder instance

FrameDecoder:
    Run a QMediaPlayer, set to a QVideoSink. The QVideoSink emits a videoFrameChanged
    signal for each frame.  Capture the frame in the slot FrameDecoder::frameChanged.
    Signal DataModel to add the frame as an icon.

This only works if ThumbReader is in the main GUI thread.  If ThumbReader is in another
thread the connection between QVideoSink::videoFrameChanged and FrameDecoder::frameChanged
fails.

Thumb code to create instance of FrameDecoder:
    FrameDecoder *frameDecoder = new FrameDecoder(dmIdx, dm->instance);
    connect(frameDecoder, &FrameDecoder::setFrameIcon, dm, &DataModel::setIconFromFrame);
    frameDecoder->getFrame(fPath);

framedecoder.h

#ifndef FRAMEDECODER_H
#define FRAMEDECODER_H

#include <QtWidgets>
#include <QMutex>
#include <QThread>
#include <QWaitCondition>
#include "Main/global.h"
#include <QMediaPlayer>
#include <QVideoSink>
#include <QVideoFrame>

class FrameDecoder : public QThread
{
    Q_OBJECT

public:
    FrameDecoder(QModelIndex dmIdx, int dmInstance, QObject *parent = nullptr);
    void stop();
    void getFrame(QString fPath);

protected:
    void run() Q_DECL_OVERRIDE;

signals:
    void setFrameIcon(QModelIndex dmIdx, QPixmap &pm, int instance,
                      FrameDecoder *thisFrameDecoder);

private slots:
    void frameChanged(const QVideoFrame frame);

private:
    FrameDecoder *thisFrameDecoder;
    QMutex mutex;
    QWaitCondition condition;
    QVideoSink *videoSink;
    QMediaPlayer *mediaPlayer;
    QString fPath;
    int dmInstance;
    QModelIndex dmIdx;
    bool thumbnailAcquired = false;
    bool abort = false;

};
#endif // FRAMEDECODER_H

framedecoder.cpp

#include "framedecoder.h"

FrameDecoder::FrameDecoder(QModelIndex dmIdx, int dmInstance, QObject *parent)
    : QThread(parent)
{
    thisFrameDecoder = this;
    this->dmIdx = dmIdx;
    this->dmInstance = dmInstance;
    mediaPlayer = new QMediaPlayer(/*this*/);
    videoSink = new QVideoSink;
    mediaPlayer->setVideoOutput(videoSink);
    connect(videoSink, &QVideoSink::videoFrameChanged, this, &FrameDecoder::frameChanged);
}

void FrameDecoder::stop()
{
    if (isRunning()) {
        mutex.lock();
        abort = true;
        condition.wakeOne();
        mutex.unlock();
        wait();
        abort = false;
    }
}

void FrameDecoder::getFrame(QString path)
{
    fPath = path;
    start();
}

void FrameDecoder::frameChanged(const QVideoFrame frame)
{
    if (thumbnailAcquired) return;
    QImage im = frame.toImage();
    if (im.isNull()) return;
    thumbnailAcquired = true;
    mediaPlayer->stop();
    QPixmap pm = QPixmap::fromImage(im.scaled(G::maxIconSize, G::maxIconSize, Qt::KeepAspectRatio));
    emit setFrameIcon(dmIdx, pm, dmInstance, thisFrameDecoder);
}

void FrameDecoder::run()
{
    mediaPlayer->setSource(fPath);
    mediaPlayer->play();
}


